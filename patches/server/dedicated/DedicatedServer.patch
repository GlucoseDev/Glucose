--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -22,6 +22,12 @@
 import java.util.function.BooleanSupplier;
 import java.util.regex.Pattern;
 import javax.annotation.Nullable;
+
+import jline.UnsupportedTerminal;
+import jline.console.ConsoleReader;
+import ml.glucosedev.glucose.Glucose;
+import ml.glucosedev.glucose.GlucoseEventHandler;
+import ml.glucosedev.glucose.plugin.GlucosePluginManager;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.DefaultUncaughtExceptionHandlerWithName;
 import net.minecraft.SharedConstants;
@@ -80,8 +86,17 @@
    private final TextFilterClient textFilterClient;
    @Nullable
    private final Component resourcePackPrompt;
+   private ConsoleReader reader;
+   private String CONSOLE_PROMPT = Glucose.getConsolePrompt();
+
+   // Glucose start
+   {
+      reader = new ConsoleReader();
+      reader.setPrompt(CONSOLE_PROMPT);
+   }
+   // Glucose end
 
-   public DedicatedServer(Thread var1, RegistryAccess.RegistryHolder var2, LevelStorageSource.LevelStorageAccess var3, PackRepository var4, ServerResources var5, WorldData var6, DedicatedServerSettings var7, DataFixer var8, MinecraftSessionService var9, GameProfileRepository var10, GameProfileCache var11, ChunkProgressListenerFactory var12) {
+   public DedicatedServer(Thread var1, RegistryAccess.RegistryHolder var2, LevelStorageSource.LevelStorageAccess var3, PackRepository var4, ServerResources var5, WorldData var6, DedicatedServerSettings var7, DataFixer var8, MinecraftSessionService var9, GameProfileRepository var10, GameProfileCache var11, ChunkProgressListenerFactory var12) throws IOException {
       super(var1, var2, var3, var6, var4, Proxy.NO_PROXY, var8, var5, var9, var10, var11, var12);
       this.settings = var7;
       this.rconConsoleSource = new RconConsoleSource(this);
@@ -90,24 +105,6 @@
    }
 
    public boolean initServer() throws IOException {
-      Thread var1 = new Thread("Server console handler") {
-         public void run() {
-            BufferedReader var1 = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
-
-            String var2;
-            try {
-               while(!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning() && (var2 = var1.readLine()) != null) {
-                  DedicatedServer.this.handleConsoleInput(var2, DedicatedServer.this.createCommandSourceStack());
-               }
-            } catch (IOException var4) {
-               DedicatedServer.LOGGER.error("Exception handling console input", var4);
-            }
-
-         }
-      };
-      var1.setDaemon(true);
-      var1.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
-      var1.start();
       LOGGER.info("Starting minecraft server version {}", SharedConstants.getCurrentVersion().getName());
       if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
          LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
@@ -146,9 +143,9 @@
       try {
          this.getConnection().startTcpServerListener(var3, this.getPort());
       } catch (IOException var10) {
-         LOGGER.warn("**** FAILED TO BIND TO PORT!");
-         LOGGER.warn("The exception was: {}", var10.toString());
-         LOGGER.warn("Perhaps a server is already running on that port?");
+         LOGGER.error("**** FAILED TO BIND TO PORT!"); // Glucose :: warn --> error
+         LOGGER.error("The exception was: {}", var10.toString()); // Glucose :: warn --> error
+         LOGGER.error("Perhaps a server is already running on that port?"); // Glucose :: warn --> error
          return false;
       }
 
@@ -172,11 +169,45 @@
          SkullBlockEntity.setSessionService(this.getSessionService());
          SkullBlockEntity.setMainThreadExecutor(this);
          GameProfileCache.setUsesAuthentication(this.usesAuthentication());
+         new GlucoseEventHandler().serverStartEvent(); // Glucose
          LOGGER.info("Preparing level \"{}\"", this.getLevelIdName());
          this.loadLevel();
          long var6 = Util.getNanos() - var4;
          String var8 = String.format(Locale.ROOT, "%.3fs", (double)var6 / 1.0E9D);
-         LOGGER.info("Done ({})! For help, type \"help\"", var8);
+         // Glucose start
+         Thread console = new Thread("Server Console Thread") {
+            public void run() {
+               String cmd;
+               try {
+                  while(!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning()) {
+                     if (Glucose.useJline()) {
+                        cmd = reader.readLine(CONSOLE_PROMPT, null);
+                     } else {
+                        cmd = reader.readLine();
+                     }
+                     if (cmd == null) {
+                        try {
+                           Thread.sleep(50L);
+                        } catch(InterruptedException e) {
+                           Thread.currentThread().interrupt();
+                        }
+                        continue;
+                     }
+                     if (cmd.trim().length() > 0) {
+                        DedicatedServer.this.handleConsoleInput(cmd.trim(), DedicatedServer.this.createCommandSourceStack());
+                     }
+                  }
+               } catch (IOException ex) {
+                  DedicatedServer.LOGGER.error("Exception handling console input", ex);
+               }
+            }
+         };
+         console.setDaemon(true);
+         console.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
+         console.start();
+         // Glucose end
+         LOGGER.info("Server started in {}! For help, type \"help\"", var8); // Glucose: changed message
+         LOGGER.info("Plugins: {}", GlucosePluginManager.getPluginNames());
          if (var2.announcePlayerAchievements != null) {
             ((GameRules.BooleanValue)this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS)).set(var2.announcePlayerAchievements, this);
          }
@@ -605,7 +636,9 @@
    }
 
    // $FF: synthetic method
+   /* // Glucose start
    public PlayerList getPlayerList() {
       return this.getPlayerList();
    }
+    */ // Glucose end
 }
